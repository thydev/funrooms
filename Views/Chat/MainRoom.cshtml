@{
    ViewData["Title"] = "Chat";
}

<div class="row">
    <h2  style="border-bottom: 1pt solid black">Pick a Game Room</h2>
    <div class="col-sm-10 col-md-10">
        <div class="col-sm-5 col-md-4"><a class="btn btn-lg btn-primary" style="margin-bottom: 10px" role="button" asp-controller="Chat" asp-action="MainRoom">Main Room</a></div>
        <div class="col-sm-5 col-md-4" style="margin-bottom: 10px"><a class="btn btn-lg btn-warning" role="button" asp-controller="EarthDefender" asp-action="EarthDefenderSingle">Earth Defender Room</a></div>
        <div class="col-sm-5 col-md-4" style="margin-bottom: 10px"><a class="btn btn-lg btn-warning" role="button" asp-controller="EarthDefender" asp-action="EarthDefenderMulti">Earth Defender Multi</a></div>
        <div class="col-sm-5 col-md-4" style="margin-bottom: 10px"><a class="btn btn-lg btn-danger" role="button" asp-controller="MoveShape" asp-action="MoveShapeRoom">Move Shape Room</a></div>
        <div class="col-sm-5 col-md-4" style="margin-bottom: 10px"><a class="btn btn-lg btn-info" role="button" asp-controller="WhiteBoard" asp-action="WhiteBoardRoom">WhiteBoard Room</a></div>
        <div class="col-sm-5 col-md-4" style="margin-bottom: 10px"><a class="btn btn-lg btn-success" role="button" asp-controller="TreeGrowing" asp-action="TreeGrowingRoom">Tree Growing Room</a></div>
        <div class="col-sm-5 col-md-4" style="margin-bottom: 10px"><a class="btn btn-lg btn-default" role="button" asp-controller="SnailRacing" asp-action="SnailRacingRoom">Snail Race Room</a></div>
    </div>
    <br>
</div>
<!-- added some simple bootstrap styling -->
<div class="row">
    <div class="col-sm-8 col-md-8" style="border-bottom: solid black 2pt">
        <h3 class="text-primary">Messages</h3>
    </div>
    <div class="col-sm-4 col-md-3" style="border-bottom: solid black 2pt">
        <h3 class="text-success text-top">Users Logged-in</h3>
    </div>
</div>

<div class="row" id="chat-area">
    <div class="col-sm-8 col-md-8">
        <p id="messages"></p>
    </div>
    <div class="col-sm-4 col-md-3" style="border-left: solid black 1pt">
        <p id="users" style="display: static"></p>
    </div>
    <div class="clear">
    </div>
    <form id="sendmessage" action="#">
        <div class="col-sm-8 col-md-8"><br>
            <input class="form-control" type="text" id="new-message">
        </div>
        <div class="col-sm-3 col-md-3"><br>
        <button type="submit" id="send" class="send btn btn-success btn-block col-sm-4 col-md-4">Send</button>
        </div>
    </form>
</div>
<script src="~/lib/signalr/signalr.js"></script>
<script>
// let transportType = signalR.HttpTransportType[getParameterByName('transport')] || signalR.HttpTransportType.WebSockets;
// let connection = new signalR.HubConnectionBuilder()
//   .configureLogging(signalR.LogLevel.Information)
//    .withUrl("/chat", transportType)
//    .build();
    var usercolorobj = {};
    var count = 0;
    var color = ["red", "green", "blue", "purple", "darkgold", "black", "orange", "dodgerblue", "violet", "tomato", "magenta"];
    
    const connection = new signalR.HubConnection("/chat", 
        { logger: signalR.LogLevel.Information });

    connection.start()
        .catch(err => appendLine(err, 'red'));

    connection.onclose(e => {
        if (e) {
            appendLine('Connection closed with error: ' + e, 'red');
        }
        else {
            appendLine('Disconnected', 'green');
        }
    });

    connection.on('SetUsersOnline', usersOnline => {
        usersOnline.forEach(user => addUserOnline(user));
    });

    connection.on('UsersJoined', users => {
        users.forEach(user => {
            appendLine('User ' + user.name + ' joined the Room', 'green');
            addUserOnline(user);
        });
    });

    connection.on('UsersLeft', users => {
        users.forEach(user => {
            appendLine('User ' + user.name + ' left the Room', 'red');
            document.getElementById(user.connectionId).outerHTML = '';
        });
    });

    connection.on('Send', (userName, message) => {
        var nameElement = document.createElement('b');
        nameElement.innerText = userName + ':';
        for(var key in usercolorobj){
            if(key == userName){
                nameElement.style.color = usercolorobj[key];
                break;
            }
        }
        var msgElement = document.createElement('span');
        msgElement.innerText = ' ' + message;
        //added in datetime for when message created.
        var now = new Date();
        var msgTimestamp = document.createElement('p');
        msgTimestamp.className = "pull-right";
        msgTimestamp.innerText = ' ~ ' + now.toLocaleString();

        var child = document.createElement('p');
        child.appendChild(nameElement);
        child.appendChild(msgElement);
        child.appendChild(msgTimestamp);
        document.getElementById('messages').appendChild(child);
        ClearMessage();
    });

    

    document.getElementById('sendmessage').addEventListener('submit', event => {
        let data = document.getElementById('new-message').value;
        connection.invoke('Send', data).catch(err => appendLine(err, 'red'));
        event.preventDefault();
    });

    function appendLine(line, color) {
        let child = document.createElement('p');
        if (color) {
            child.style.color = color;
        }
        child.innerText = line;
        document.getElementById('messages').appendChild(child);
    };

    function addUserOnline(user) {
        if (document.getElementById(user.connectionId)) {
            return;
        }
        var userLi = document.createElement('p');
        userLi.innerText = `${user.name}`;
        userLi.id = user.connectionId;
        while(count<color.length){
        var usercolor = color[count];
        userLi.style.color = usercolor;
        usercolorobj[user.name] = usercolor;
            count++;
            if(count == 10){
                count = 0;
            }
            break;
        }
        document.getElementById('users').appendChild(userLi);
    }

    function getParameterByName(name, url) {
        if (!url) {
            url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    };
    function ClearMessage(){
        document.getElementById('new-message').value = "";
    }

</script>
