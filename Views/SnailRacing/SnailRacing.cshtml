@{
    ViewData["Title"] = "Snail";
}

<h1 class="GameTitle">Welcome to the Snail Racing Room</h1>
<div id="gestdirection">
    <h2 class="colorized">Directions:</h2>
    <h4 class="colorized">Wave Hand To Right To Move Snail</h4>
</div>
<div class="row">
    <div id="users"></div>
</div>

<h2 id="waiting" class="text-center">Ready Set...</h2>
<div class="newgame text-center">
    <br>
    <h2 class="colorized playtext">Ready to Race?</h2>
    <h2 class="colorized readytext">Waiting for Another Racer...</h2>    
    <button class="btn btn-lg btn-success gamestart">Start Game</button>
</div>



<div id="container">
    <!-- snail container needs background image of track2 -->
    <div id="snailcontainer" style="background-image: url('/images/Track2Runners.jpg'); height: 500px; width: 500px; padding-top: 140px"></div>
</div>

<script src="~/lib/signalr/signalr.js"></script>
<script src="~/js/gest.js"></script>
<script>
    var usercolorobj = {};
    var count = 0;
    var color = ["red", "blue", "purple", "darkgold", "black", "orange", "dodgerblue", "violet", "white", "tomato", "magenta"];
    $(document).ready(function(){
        var userid = {};
        var thisplayer = "";
        //gspc = game start push count
        var gspc = 0;
        $("#gestdirection").hide();
        $("#waiting").hide();
        $("#container").hide();
        $(".playtext").hide();
        $(".gamestart").hide();
        //usercount keeps track of users in snail room
        var usercount = 0;
        //hide start game button until 2 players are in lobby
        console.log("ready");
        const snailhub = new signalR.HubConnection(
            "/snailrace", { logger: signalR.LogLevel.Information });

        //////// Testing below for 2 player
        snailhub.on('SetUsersOnline', usersOnline => {
            usersOnline.forEach(user => addUserOnline(user));
        });
//
        snailhub.on('UsersJoined', users => {
            users.forEach(user => {
                addUserOnline(user);
            });
        });

        snailhub.on('UsersLeft', users => {
            users.forEach(user => {
                document.getElementById(user.name).outerHTML = '';
                var user = userid[user.name];
                document.getElementById(user).parentElement.outerHTML = '';
                console.log(user, "thisuser id");
                
            });
            usercount--;
            gspc--;
            console.log(usercount);
            if(usercount<2){
                window.location.href = "/SnailRacing";
            }
        });

//use code below to send messages to other player in room
        snailhub.on('Send', (userName) => {
            console.log(userName);
            var nameElement = document.createElement('b');
            nameElement.innerText = userName + '   ';
            for(var key in usercolorobj){
                if(key == userName){
                    nameElement.style.color = usercolorobj[key];
                    break;
                }
            }
            var child = document.createElement('h3');
            child.className = "col-md-6";
            child.appendChild(nameElement);
            document.getElementById('users').appendChild(child);
        });
        snailhub.on("SnailMoveClient", (left, userName) => {
            console.log(userName);
            var marginleft = "";
            marginleft += left;
            marginleft += "px";
            console.log(marginleft);
            var connectid = userid[userName];
            thisplayer = connectid;
            console.log("snail id",connectid);
            console.log($(connectid));
            $("#"+connectid).css("margin-left", marginleft);
            console.log("left after invoke",left)
            if(left >= 360){
                snailhub.stop();
                Gamescore();
            }
        }); 
        function Gamescore(){
            console.log("thisplayer", thisplayer);
            for(var player in userid){
                if(thisplayer == userid[player]){
                    $("#container").html("<div class='text-center'><h1>Game Over" +" "+player+" Wins</h1><p><a class='btn btn-success' role='button' href='/SnailRacing'>Play Again?</a></p></div>");
                }
            }
        }
        snailhub.on("StartGameClient", (pushcount) =>{
            gspc = pushcount;
            console.log("gspc", gspc);
            if(gspc == 2){
                gest.start();
                console.log("started");
                $("#container").show();
                $("#waiting").hide();
            }
        });
        snailhub.start();
        gest.options.subscribeWithCallback(function(gesture) {
            var message = '';
            console.log(gesture.direction);
            if (gesture.direction) {
                message = gesture.direction;
                console.log($(".snail"));
                $snail = $(".snail");
                console.log("snail1", $snail);
                console.log($snail);
                if(gesture.right){
                    var marginleft = ($($snail).css("margin-left"));

                    var ml ="";
                    for(var i = 0; i<marginleft.length-2; i++){
                        ml += marginleft[i];
                    }
                    console.log("marginleft", ml)
                    console.log(parseInt(ml));
                    snailhub.invoke("SnailMove", parseInt(ml), gesture.right)
                        .catch(err => console.error);
                }
            } else {
                message = gesture.error.message;
            } 
        });
        //Testing below:
        function addUserOnline(user) {
            if (document.getElementById(user.connectionId)) {
                return;
            }
            usercount++;
            if(usercount > 2){
                usercount--;
                return;
            }
            console.log(usercount);
            if(usercount > 1){
                $(".gamestart").show();
                $(".playtext").show();
                $("#gestdirection").show();
                $(".readytext").hide();
            }
            var userLi = document.createElement('h3');
            userLi.innerText = `${user.name}`+"   racer# "+`${usercount}`;
            userLi.id = user.name;
            //class for user name once entered room below used bootstrap:
            userLi.className = "col-md-6 text-center";
            while(count<color.length){
            // can create image object with url and user name
                var usercolor = color[count];
                userLi.style.color = usercolor;
                userid[user.name] = user.connectionId;
                usercolorobj[user.name] = usercolor;
                count++;
                if(count == 10){
                    count = 0;
                }
                break;
            }
            //adjust snail pic and div to seperate snail
            var snaildiv = document.createElement('div');
            var snailrow = document.createElement("div");
            snailrow.className= "snailrow";
            var snailpic = document.createElement('img');
            snailpic.id = user.connectionId;
            snaildiv.className = "row";
            snaildiv.style.height = "100px";
            snaildiv.style.display = "block"
            snailpic.className = "snail";
            snailpic.style.display = "block"
            //loop through image array
            snailpic.src = "/images/SnailBlue.png";
            snailpic.width = "110";
            snailpic.height = "70";
            
            snaildiv.appendChild(snailrow);
            snailrow.appendChild(snailpic);
            document.getElementById("snailcontainer").appendChild(snaildiv);
            document.getElementById('users').appendChild(userLi);
        }
        $(".gamestart").click(function(e){
            //testing invoke below
            if(usercount > 1){
                snailhub.invoke("StartGame", gspc)
                console.log("gamestartinvoked");
                $(".newgame").hide();
                $("#waiting").show();
            }
            
        });
    });
</script>
